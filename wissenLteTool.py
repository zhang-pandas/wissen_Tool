# -*- coding: utf-8 -*-
"""
/***************************************************************************
 wissenLteTool
                                 A QGIS plugin
 wissenLteTool
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-07-13
        git sha              : $Format:%H$
        copyright            : (C) 2021 by wissen
        email                : wissen.gs.tool@outlook.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .wissenLteTool_dialog import wissenLteToolDialog
import os.path
from qgis.core import Qgis, QgsProject, QgsVectorLayer

# 我的插件需要导入的
import pandas as pd
import math
try:
    from osgeo import gdal
    from osgeo import ogr
    from osgeo import osr
except ImportError:
    import gdal
    import ogr
    import osr


class wissenLteTool:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'wissenLteTool_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&wissenLteTool')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('wissenLteTool', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/wissenLteTool/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'wissen.gs.tool'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&wissenLteTool'),
                action)
            self.iface.removeToolBarIcon(action)

    # 加载csv文件的路径
    def select_input_file(self):
        filename,_filter = QFileDialog.getOpenFileName(
            self.dlg, "Select input file", "", "*.csv"
        )
        self.dlg.lineEditCsv.setText(filename)

    # 导出shp文件的路径
    def select_output_file(self):
        filename,_filter = QFileDialog.getSaveFileName(
            self.dlg, "Select output file", "", "*.shp"
        )
        self.dlg.lineEditShp.setText(filename)

    def get_lonlat(self, azimuth, distance, origin_lon, origin_lat):
        """
        :param azimuth: 平移角度，正北为0
        :param distance: 平移的距离
        :param origin_lon: 原经度
        :param origin_lat: 原纬度
        :return: 平移后的经纬度
        """
        lonlon = origin_lon + distance * math.sin(azimuth * math.pi / 180) * 180 / (
                math.pi * 6371229 * math.cos(origin_lat * math.pi / 180))  # 经度
        lonlat = origin_lat + distance * math.cos(azimuth * math.pi / 180) / (math.pi * 6371229 / 180)  # 纬度
        return lonlon, lonlat

    def create_polygon(self, csvname, shpname):
        # 为了支持中文路径，请添加下面这句代码
        gdal.SetConfigOption("GDAL_FILENAME_IS_UTF8", "NO")
        # 为了使属性表字段支持中文，请添加下面这句
        gdal.SetConfigOption("SHAPE_ENCODING", "")
        # 生成线矢量文件
        driver = ogr.GetDriverByName("ESRI Shapefile")
        data_source = driver.CreateDataSource(shpname)  # shp文件名称
        srs = osr.SpatialReference()
        srs.ImportFromEPSG(4326)  # 空间参考：WGS84
        layer = data_source.CreateLayer(shpname, srs, ogr.wkbPolygon)  # 图层名称要与shp名称一致
        field_name = ogr.FieldDefn("Name", ogr.OFTString)  # 设置属性
        layer.CreateField(ogr.FieldDefn('cell', ogr.OFTString))  # 创建属性
        layer.CreateField(ogr.FieldDefn('cellname', ogr.OFTString))  # 创建属性
        layer.CreateField(ogr.FieldDefn('longitude', ogr.OFTReal))  # 创建属性
        layer.CreateField(ogr.FieldDefn('latitude', ogr.OFTReal))  # 创建属性
        layer.CreateField(ogr.FieldDefn('EARFCN', ogr.OFTString))  # 创建属性
        layer.CreateField(ogr.FieldDefn('PCI', ogr.OFTString))  # 创建属性
        layer.CreateField(ogr.FieldDefn('CoverType', ogr.OFTString))  # 创建属性
        layer.CreateField(ogr.FieldDefn('eNodeBID', ogr.OFTString))  # 创建属性
        layer.CreateField(ogr.FieldDefn('ECGI', ogr.OFTString))  # 创建属性
        layer.CreateField(ogr.FieldDefn('Azimuth', ogr.OFTString))  # 创建属性
        layer.CreateField(ogr.FieldDefn('DownTilt', ogr.OFTString))  # 创建属性
        layer.CreateField(ogr.FieldDefn('M-DownTilt', ogr.OFTString))  # 创建属性
        layer.CreateField(ogr.FieldDefn('E-DownTilt', ogr.OFTString))  # 创建属性
        layer.CreateField(ogr.FieldDefn('Height', ogr.OFTString))  # 创建属性
        layer.CreateField(ogr.FieldDefn('TAC', ogr.OFTString))  # 创建属性
        layer.CreateField(ogr.FieldDefn('FREQ', ogr.OFTString))  # 创建属性

        layer.CreateField(field_name)  # 创建字段
        field_length = ogr.FieldDefn("Area", ogr.OFTReal)  ## 设置属性
        layer.CreateField(field_length)  # 创建字段
        feature = ogr.Feature(layer.GetLayerDefn())
        # feature.SetField("Name", "polygon")  # 设置字段值
        # feature.SetField("Area", "500")  # 设置字段值
        # 获取信息
        lte = pd.read_csv(csvname)
        ltej = lte[['小区中文名', '基站中文名', 'eNodeBName', 'CellName', 'EARFCN', 'PCI', 'CoverType', 'eNodeBID',
                    'Azimuth（方位角）', 'Longitude', 'Latitude', 'DownTilt（俯仰角）', 'M-DownTilt（机械下倾）',
                    'E-DownTilt（电下倾）', '站高', 'TAC', '频点', '频段', 'ECGI']]
        # 5.2 填充数据
        for i in range(len(ltej)):
            # 获取值
            cellname = ltej.iloc[i, 0]
            cell = ltej.iloc[i, 3]
            EARFCN = ltej.iloc[i, 4]
            PCI = ltej.iloc[i, 5]
            CoverType = ltej.iloc[i, 6]
            eNodeBID = ltej.iloc[i, 7]
            Azimuth = ltej.iloc[i, 8]
            longitude = float(ltej.iloc[i, 9])
            latitude = float(ltej.iloc[i, 10])
            DownTilt = ltej.iloc[i, 11]
            M_DownTilt = ltej.iloc[i, 12]
            E_DownTilt = ltej.iloc[i, 13]
            Height = ltej.iloc[i, 14]
            TAC = ltej.iloc[i, 15]
            freq = ltej.iloc[i, 17]
            ECGI = ltej.iloc[i, 18]

            # # 初始化
            # oDefn = layer.GetLayerDefn()
            # oFeatureTriangle = ogr.Feature(oDefn)
            # 填入值--与属性对应
            feature.SetField('cell', cell)
            feature.SetField('cellname', cellname)
            feature.SetField('longitude', longitude)
            feature.SetField('latitude', latitude)
            feature.SetField('EARFCN', str(EARFCN))
            feature.SetField('PCI', str(PCI))
            feature.SetField('CoverType', CoverType)
            feature.SetField('eNodeBID', str(eNodeBID))
            feature.SetField('ECGI', str(ECGI))
            feature.SetField('DownTilt', str(DownTilt))
            feature.SetField('M-DownTilt', str(M_DownTilt))
            feature.SetField('E-DownTilt', str(E_DownTilt))
            feature.SetField('Height', str(Height))
            feature.SetField('TAC', str(TAC))
            feature.SetField('FREQ', str(freq))

            if CoverType == "室分":
                lonlatL1 = self.get_lonlat(0, 50, longitude, latitude)
                lonL1 = lonlatL1[0]
                latL1 = lonlatL1[1]
                lonlatL2 = self.get_lonlat(90, 50, longitude, latitude)
                lonL2 = lonlatL2[0]
                latL2 = lonlatL2[1]
                lonlat_M = self.get_lonlat(180, 50, longitude, latitude)
                lon_M = lonlat_M[0]
                lat_M = lonlat_M[1]
                lonlatR1 = self.get_lonlat(270, 50, longitude, latitude)
                lonR1 = lonlatR1[0]
                latR1 = lonlatR1[1]
                lonlatR2 = self.get_lonlat(0, 50, longitude, latitude)
                lonR2 = lonlatR2[0]
                latR2 = lonlatR2[1]
            elif freq == "F":
                lonlatL1 = self.get_lonlat(Azimuth - 35, 60, longitude, latitude)
                lonL1 = lonlatL1[0]
                latL1 = lonlatL1[1]
                lonlatL2 = self.get_lonlat(Azimuth - 5, 60, longitude, latitude)
                lonL2 = lonlatL2[0]
                latL2 = lonlatL2[1]
                lonlat_M = self.get_lonlat(Azimuth, 60, longitude, latitude)
                lon_M = lonlat_M[0]
                lat_M = lonlat_M[1]
                lonlatR1 = self.get_lonlat(Azimuth + 5, 60, longitude, latitude)
                lonR1 = lonlatR1[0]
                latR1 = lonlatR1[1]
                lonlatR2 = self.get_lonlat(Azimuth + 35, 60, longitude, latitude)
                lonR2 = lonlatR2[0]
                latR2 = lonlatR2[1]
            elif freq == "E":
                lonlatL1 = self.get_lonlat(Azimuth - 30, 70, longitude, latitude)
                lonL1 = lonlatL1[0]
                latL1 = lonlatL1[1]
                lonlatL2 = self.get_lonlat(Azimuth - 5, 70, longitude, latitude)
                lonL2 = lonlatL2[0]
                latL2 = lonlatL2[1]
                lonlat_M = self.get_lonlat(Azimuth, 70, longitude, latitude)
                lon_M = lonlat_M[0]
                lat_M = lonlat_M[1]
                lonlatR1 = self.get_lonlat(Azimuth + 5, 70, longitude, latitude)
                lonR1 = lonlatR1[0]
                latR1 = lonlatR1[1]
                lonlatR2 = self.get_lonlat(Azimuth + 30, 70, longitude, latitude)
                lonR2 = lonlatR2[0]
                latR2 = lonlatR2[1]
            elif freq == "D" or freq == "A":
                lonlatL1 = self.get_lonlat(Azimuth - 25, 80, longitude, latitude)
                lonL1 = lonlatL1[0]
                latL1 = lonlatL1[1]
                lonlatL2 = self.get_lonlat(Azimuth - 5, 80, longitude, latitude)
                lonL2 = lonlatL2[0]
                latL2 = lonlatL2[1]
                lonlat_M = self.get_lonlat(Azimuth, 80, longitude, latitude)
                lon_M = lonlat_M[0]
                lat_M = lonlat_M[1]
                lonlatR1 = self.get_lonlat(Azimuth + 5, 80, longitude, latitude)
                lonR1 = lonlatR1[0]
                latR1 = lonlatR1[1]
                lonlatR2 = self.get_lonlat(Azimuth + 25, 80, longitude, latitude)
                lonR2 = lonlatR2[0]
                latR2 = lonlatR2[1]
            elif freq == "900":
                lonlatL1 = self.get_lonlat(Azimuth - 20, 90, longitude, latitude)
                lonL1 = lonlatL1[0]
                latL1 = lonlatL1[1]
                lonlatL2 = self.get_lonlat(Azimuth - 5, 90, longitude, latitude)
                lonL2 = lonlatL2[0]
                latL2 = lonlatL2[1]
                lonlat_M = self.get_lonlat(Azimuth, 90, longitude, latitude)
                lon_M = lonlat_M[0]
                lat_M = lonlat_M[1]
                lonlatR1 = self.get_lonlat(Azimuth + 5, 90, longitude, latitude)
                lonR1 = lonlatR1[0]
                latR1 = lonlatR1[1]
                lonlatR2 = self.get_lonlat(Azimuth + 20, 90, longitude, latitude)
                lonR2 = lonlatR2[0]
                latR2 = lonlatR2[1]
            elif freq == "1800":
                lonlatL1 = self.get_lonlat(Azimuth - 15, 100, longitude, latitude)
                lonL1 = lonlatL1[0]
                latL1 = lonlatL1[1]
                lonlatL2 = self.get_lonlat(Azimuth - 5, 100, longitude, latitude)
                lonL2 = lonlatL2[0]
                latL2 = lonlatL2[1]
                lonlat_M = self.get_lonlat(Azimuth, 100, longitude, latitude)
                lon_M = lonlat_M[0]
                lat_M = lonlat_M[1]
                lonlatR1 = self.get_lonlat(Azimuth + 5, 100, longitude, latitude)
                lonR1 = lonlatR1[0]
                latR1 = lonlatR1[1]
                lonlatR2 = self.get_lonlat(Azimuth + 15, 100, longitude, latitude)
                lonR2 = lonlatR2[0]
                latR2 = lonlatR2[1]

            # wkt = "POLYGON((116.41 39.89, 116.41 39.91, 116.39 39.91, 116.39 39.89))"  # 创建面
            wkt = "POLYGON((" + str(longitude) + ' ' + str(latitude) + ',' + \
                  str(lonL1) + ' ' + str(latL1) + ',' + \
                  str(lonL2) + ' ' + str(latL2) + ',' + \
                  str(lon_M) + ' ' + str(lat_M) + ',' + \
                  str(lonR1) + ' ' + str(latR1) + ',' + \
                  str(lonR2) + ' ' + str(latR2) + ',' + \
                  str(longitude) + ' ' + str(latitude) + '))'
            polygon = ogr.CreateGeometryFromWkt(wkt)  # 生成面
            feature.SetGeometry(polygon)  # 设置面
            layer.CreateFeature(feature)  # 添加面

        feature = None  # 关闭属性
        data_source = None  # 关闭数据
        print("数据集创建完成！\n")

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = wissenLteToolDialog()
            # 点击按钮，确定路径
            self.dlg.pushButtonCsv.clicked.connect(self.select_input_file)
            self.dlg.pushButtonShp.clicked.connect(self.select_output_file)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # 获取txt文件路径，shp文件路径，腾讯key
            csvname = self.dlg.lineEditCsv.text()
            shpname = self.dlg.lineEditShp.text()
            self.create_polygon(csvname, shpname)

            # 将结果加载QGIS界面
            layerName = shpname.split("/")[len(shpname.split("/")) - 1].replace(".shp", "")
            vlayer = QgsVectorLayer(shpname, layerName, "ogr")
            if vlayer.isValid():
                QgsProject.instance().addMapLayer(vlayer)
            else:
                print("图层加载失败！")
            pass
            # 在QGIS界面上打印结果
            self.iface.messageBar().pushMessage("成功", "加载图层：" + layerName, level=Qgis.Success, duration=3)
			
			
